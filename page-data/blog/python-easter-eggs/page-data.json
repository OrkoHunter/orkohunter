{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-js",
    "path": "/blog/python-easter-eggs/",
    "result": {"data":{"markdownRemark":{"html":"<blockquote>\n<p>Just when you thought, Python could not be more fun.</p>\n</blockquote>\n<h2>Read on GitHub</h2>\n<p><a href=\"https://github.com/OrkoHunter/python-easter-eggs\">https://github.com/OrkoHunter/python-easter-eggs</a></p>\n<h3>1. Hello World</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> __hello__\nHello World</code></pre></div>\n<h3>2. The classic</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>>> import this\n\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!</code></pre></div>\n<h3>3. The missing line from the classic</h3>\n<p>The Zen of Python was introduced in <a href=\"https://www.python.org/dev/peps/pep-0020/#id2\">PEP 20</a>. It is supposed to be 20 aphorisms, but only 19 of which have been written down.</p>\n<h3>4. A simple life lesson</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> this\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> love <span class=\"token operator\">=</span> this\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> this <span class=\"token keyword\">is</span> love\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> love <span class=\"token keyword\">is</span> <span class=\"token boolean\">True</span>\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> love <span class=\"token keyword\">is</span> <span class=\"token boolean\">False</span>\n<span class=\"token boolean\">False</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> love <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">or</span> <span class=\"token boolean\">False</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> love <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">True</span> <span class=\"token keyword\">or</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">;</span> love <span class=\"token keyword\">is</span> love  <span class=\"token comment\"># FML</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<h3>5. Comics, yeah.</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> antigravity</code></pre></div>\n<h3>6. It's not a choice, it defines who we are</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> braces\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\nSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">not</span> a chance</code></pre></div>\n<h3>7. Origins</h3>\n<p>The name Python has nothing to do with the type of Snake.</p>\n<h3>8. The confuscation</h3>\n<p>This is how the <code class=\"language-text\">this.py</code> module looks, which prints the Zen of Python.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">s<span class=\"token punctuation\">:</span> <span class=\"token triple-quoted-string string\">\"\"\"Gur Mra bs Clguba, ol Gvz Crgref\n\nOrnhgvshy vf orggre guna htyl.\nRkcyvpvg vf orggre guna vzcyvpvg.\nFvzcyr vf orggre guna pbzcyrk.\nPbzcyrk vf orggre guna pbzcyvpngrq.\nSyng vf orggre guna arfgrq.\nFcnefr vf orggre guna qrafr.\nErnqnovyvgl pbhagf.\nFcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf.\nNygubhtu cenpgvpnyvgl orngf chevgl.\nReebef fubhyq arire cnff fvyragyl.\nHayrff rkcyvpvgyl fvyraprq.\nVa gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.\nGurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.\nNygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu.\nAbj vf orggre guna arire.\nNygubhtu arire vf bsgra orggre guna *evtug* abj.\nVs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn.\nVs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.\nAnzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\"</span>\n\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        d<span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The code for the Zen violates itself. It's not beautiful but ugly, not explicit but implicit.\nThis would probably be the <em>only</em> module to go against the spirit of what it says itself.\n.</p>\n<h3>9. C/C++ anyone?</h3>\n<p>From the Zen again,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There should be one-- and preferably only one --obvious way to do it.</code></pre></div>\n<h3>10. Naming identifiers can be unspeakably cool</h3>\n<p>Just when you thought that working in Python couldn't possibly <em>be</em> any more fun,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> math <span class=\"token keyword\">import</span> pi\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> π <span class=\"token operator\">=</span> pi\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> area <span class=\"token operator\">=</span> π <span class=\"token operator\">*</span> r<span class=\"token operator\">**</span><span class=\"token number\">2</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> ré<span class=\"token builtin\">sum</span>é <span class=\"token operator\">=</span> <span class=\"token string\">'knows Python'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'Python'</span> <span class=\"token keyword\">in</span> ré<span class=\"token builtin\">sum</span>é\n<span class=\"token boolean\">True</span></code></pre></div>\n<h3>11. Picking a place for meetup?</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> antigravity <span class=\"token keyword\">import</span> geohash\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Your location, a date and that date's (or most recent) DJIA opening.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> geohash<span class=\"token punctuation\">(</span><span class=\"token number\">37.421542</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">122.085589</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'2005-05-26-10458.68'</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">37.857713</span> <span class=\"token operator\">-</span><span class=\"token number\">122.544543</span></code></pre></div>\n<p>This can generate a GPS coordinate in a region which is 1 longitude long and 1\nlatitude wide based on your location.</p>\n<h3>12. The FLUFL - Friendly Language Uncle For Life from <a href=\"https://www.python.org/dev/peps/pep-0401\">PEP 401 -- BDFL Retirement</a></h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> barry_as_FLUFL\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;></span> <span class=\"token number\">2</span>\n<span class=\"token boolean\">True</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span>\n       <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> invalid syntax</code></pre></div>\n<p>Recognized that the != inequality operator in Python 3.0 was a horrible, finger pain inducing mistake, the FLUFL reinstates the &#x3C;> diamond operator as the sole spelling.</p>\n<h3>13. InPynite?</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> infinity <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'infinity'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span>infinity<span class=\"token punctuation\">)</span>\n<span class=\"token number\">314159</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-inf'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">314159</span></code></pre></div>\n<p>A hash is a fixed sized integer that identifies a particular value. On a closer look, the hash of infinity is 10^5 x pi. Interestingly, hash(float('-inf')) yields -10^5 x pi in python3, whereeas -271828 i.e - 10^5 x e in python2.</p>\n<h2>Notes</h2>\n<ol>\n<li>Easiest hello world program in a language without calling any function</li>\n<li>Each and every line is the philosophy of Python's design and is a supreme holy guide</li>\n<li>Maybe just to show that there always should be a new line at the end of a file!</li>\n<li>Not an easter egg, a joke in the interpreter</li>\n<li>It opens this <a href=\"https://xkcd.com/353\">xkcd comic</a> which demonstrates how easy it is to do stuff with modules</li>\n<li>This is to instantly close down any conversation about introducing curly braces to Python</li>\n<li>Guido van Rossum is a big fan of <a href=\"https://en.wikipedia.org/wiki/Monty_Python%27s_Flying_Circus\">Monty Python's Flying Circus</a></li>\n<li>It's a substitution cipher called <a href=\"https://en.wikipedia.org/wiki/ROT13\">ROT13</a></li>\n<li>In many languages there are two ways to do the same thing <code class=\"language-text\">--no</code> and <code class=\"language-text\">no--</code>. The message has a hidden example in itself</li>\n<li>Support for unicode character set for naming identifiers was added in Python3. Though, it is not explicitly preferred while writing code, it adds flavour to working with scientific formulas</li>\n<li>The original code is <a href=\"https://github.com/python/cpython/blob/master/Lib/antigravity.py\">here</a> with the <a href=\"https://xkcd.com/426/\">xkcd comic</a> referenced, and maybe that's why this is also in the <code class=\"language-text\">antigravity</code> module</li>\n<li>The <a href=\"https://www.python.org/dev/peps/pep-0401/\">PEP 401</a> is an April Fools' Joke - The PEP's number is 401, i.e. 4/01 or April 1st (April Fools' Day). The PEP states that Guido van Rossum is stepping down. The new title given to him would be pronounced \"BDEVIL\" (Benevolent Dictator Emeritus Vacationing Indefinitely from the Language) and Guido's successor will be Barry Warsaw, or as he is affectionately known, Uncle Barry. Uncle Barry's official title is \"FLUFL\" (Friendly Language Uncle For Life). There are in-jokes about the Parrot virtual machine and the \"non-existent\" Python Secret Underground (possibly a throw-back to <a href=\"https://en.wikipedia.org/wiki/There_Is_No_Cabal\">\"TINC\" on USENET</a>).</li>\n<li><a href=\"https://www.reddit.com/r/Python/comments/6wrd8t/nice_lil_easter_egg_i_suppose/\">Source</a>.</li>\n</ol>","timeToRead":5,"frontmatter":{"categories":["Tech"],"date":"May 08, 2017","draft":false,"slug":"/blog/python-easter-eggs","subtitle":"","summary":"","title":"Python's easter eggs and hidden jokes","image":null}}},"pageContext":{"id":"fc57b818-1592-5b76-858c-ddc96f2415b7","frontmatter__slug":"/blog/python-easter-eggs","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["764694655"]}